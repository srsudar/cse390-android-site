<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homeworks on CSE 390 A1: Android Programming</title>
    <link>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/</link>
    <description>Recent content in Homeworks on CSE 390 A1: Android Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Oct 2016 17:27:51 -0700</lastBuildDate>
    <atom:link href="https://courses.cs.washington.edu/courses/cse390a1/16au/homework/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Homework 4</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-4/</link>
      <pubDate>Tue, 25 Oct 2016 17:27:51 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-4/</guid>
      <description>

&lt;h1 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h1&gt;

&lt;p&gt;Implement your own &lt;code&gt;RecyclerView&lt;/code&gt; to match the images shown below. Pressing the
Floating Action Button (FAB) adds an item. Pressing the trashcan deletes the
item. Adds and deletes are animated.&lt;/p&gt;

&lt;h1 id=&#34;tl-but-will-still-r&#34;&gt;tl; but will still r&lt;/h1&gt;

&lt;p&gt;As we talked about today,
&lt;a href=&#34;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html&#34;&gt;&lt;code&gt;RecyclerView&lt;/code&gt;&lt;/a&gt;
is a class that facilitates displaying lists of items, and it does so
efficiently. To accomplish this it enforces the ViewHolder design pattern in
order to minimize the number of &lt;code&gt;findViewbyId()&lt;/code&gt; calls, as these calls traverse
the view hierarchy and can be very expensive. &lt;code&gt;RecyclerView&lt;/code&gt; also provides a
number of other benefits, including fine-grained control of child positioning,
via the
&lt;a href=&#34;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html&#34;&gt;&lt;code&gt;LayoutManager&lt;/code&gt;&lt;/a&gt;,
and painless animations thanks to
&lt;a href=&#34;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html&#34;&gt;&lt;code&gt;ItemAnimator&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Homework 4 is to implement a &lt;code&gt;RecyclerView&lt;/code&gt; that looks like the images shown
below&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I would break this into several steps. These are somewhat specific, as many
people missed last week&amp;rsquo;s lecture and I get the impression that the way all of
this plumbs together remains somewhat opaque. Much of this is described in
Android&amp;rsquo;s guide to &lt;a href=&#34;https://developer.android.com/training/material/lists-cards.html&#34;&gt;Creating Lists and
Cards&lt;/a&gt;, so
take a read through that as well.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Create a new Activity&lt;/strong&gt;: This &lt;code&gt;Activity&lt;/code&gt; will hold the &lt;code&gt;RecyclerView&lt;/code&gt;. To
get a lot of the annoying boilerplate out of the way, I would recommend
using File | New | Activity | Gallery, and then selecting &amp;lsquo;Basic Activity&amp;rsquo;.
This should include a layout and a &amp;lsquo;Floating Action Button&amp;rsquo;, which is a
common design element on Android.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Download the icons&lt;/strong&gt;: You&amp;rsquo;ll need two icons for this: a trashcan and a
white plus button to go in the FAB. Download the icons
&lt;a href=&#34;https://design.google.com/icons/&#34;&gt;here&lt;/a&gt;. They are called &lt;code&gt;delete&lt;/code&gt; and
&lt;code&gt;add&lt;/code&gt;. Download the PNGs and put the &lt;code&gt;drawable-*&lt;/code&gt; directories directly under
&lt;code&gt;res/&lt;/code&gt;. You can try to use an icon importer, but I&amp;rsquo;ve never gotten this to
work. When successful, you should be able to refer to the drawables by their
name, e.g. &lt;code&gt;@drawable/ic_add_white_24dp&lt;/code&gt; in your xml.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Include RecyclerView in a layout&lt;/strong&gt;: As part of the generation process in
step 1, Android Studio will generate some layout files for you. These files
live in &lt;code&gt;res/layout/&lt;/code&gt;, and define what your view hierarchy will look like.
Note that in your &lt;code&gt;Activity&lt;/code&gt;&amp;rsquo;s &lt;code&gt;onCreate()&lt;/code&gt; method, the wizard has called
&lt;code&gt;setContentView()&lt;/code&gt; with the name of your layout file. This is where we
connect the layout in the xml to the UI presented by your &lt;code&gt;Activity&lt;/code&gt;. Define
a &lt;code&gt;RecyclerView&lt;/code&gt; in that layout file, giving it an ID so that you can refer
to it from you &lt;code&gt;Activity&lt;/code&gt; code. The Creating Lists and Cards guide above has
examples of this.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create a dummy object to display&lt;/strong&gt;: &lt;code&gt;RecyclerView&lt;/code&gt; displays lists of
objects. In the real world, this would be an object representing something,
like a Github repo or an email. You can create whatever object you want for
this. I made one called &lt;code&gt;FooObject&lt;/code&gt;, the entirety of which looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class FooObject {
 public String name;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create these objects I also made a &lt;code&gt;FooFactory&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; public class FooFactory {
   public FooObject createFoo() {
     Random random = new Random();
     int semiRandomInt = random.nextInt(500);
     FooObject result = new FooObject();
     result.name = &amp;quot;I am semi-random Foo #&amp;quot; + semiRandomInt;
     return result;
   }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Define a View to represent FooObject&lt;/strong&gt;: Adapters create Views. In our
case, we want to do this by inflating an xml file living under
&lt;code&gt;res/layout/&lt;/code&gt;. You should make yours look like the image below. Note that
there are two lines. The second line has two items: a left-aligned piece of
text and a right-aligned image of a trashcan. I used two
&lt;a href=&#34;https://developer.android.com/guide/topics/ui/layout/linear.html&#34;&gt;&lt;code&gt;LinearLayout&lt;/code&gt;&lt;/a&gt;s,
two
&lt;a href=&#34;https://developer.android.com/reference/android/widget/TextView.html&#34;&gt;&lt;code&gt;TextView&lt;/code&gt;&lt;/a&gt;s,
and an
&lt;a href=&#34;https://developer.android.com/reference/android/widget/ImageView.html&#34;&gt;&lt;code&gt;ImageView&lt;/code&gt;&lt;/a&gt;.
I wrapped everything in a
&lt;a href=&#34;https://developer.android.com/reference/android/support/v7/widget/CardView.html&#34;&gt;&lt;code&gt;CardView&lt;/code&gt;&lt;/a&gt;
to make it look fancy.
&lt;img src=&#34;https://courses.cs.washington.edu/courses/cse390a1/16au/
/homework/hw4_fooView.png&#34; alt=&#34;Closeup of Item View&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create an Adapter&lt;/strong&gt;: Extend &lt;code&gt;RecyclerView.Adapter&lt;/code&gt; and implement it to
display your &lt;code&gt;FooObject&lt;/code&gt;s. Again, the guide linked above will be extremely
helpful here.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hook up the Activity&lt;/strong&gt;: Follow the guide above to implement your
&lt;code&gt;onCreate()&lt;/code&gt; method. You should now be able to run the app and find an empty
screen. Pressing the FAB will generate a little message.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hook up the FAB&lt;/strong&gt;: Add a &lt;code&gt;View.OnClickListener&lt;/code&gt; to the FAB to add a
&lt;code&gt;FooObject&lt;/code&gt; with every click.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hook up the delete button&lt;/strong&gt;: Add a &lt;code&gt;View.OnClickListener&lt;/code&gt; to the
&lt;code&gt;ImageView&lt;/code&gt; displaying the trash can that deletes the view from the
&lt;code&gt;Adapter&lt;/code&gt;. To do this, I had to employ the &lt;code&gt;ViewHolder#getAdapterPosition()&lt;/code&gt;
method. I also used &lt;code&gt;View#setTag()&lt;/code&gt;. This is probably the trickiest part, or
at least it was the most foreign to me. Deleting the item from the dataset
is relatively simple, but getting the listener in a scope where you can call
&lt;code&gt;getAdapterPosition()&lt;/code&gt; might not be immediately obvious.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hook up animations&lt;/strong&gt;: Make sure you are calling &lt;code&gt;notifyItemInserted()&lt;/code&gt; and
&lt;code&gt;notifyItemRemoved()&lt;/code&gt; when you add and remove items. This will animate the
actions and make them look pretty.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;images&#34;&gt;Images&lt;/h1&gt;

&lt;h2 id=&#34;closeup-of-the-item-view&#34;&gt;Closeup of the Item View&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://courses.cs.washington.edu/courses/cse390a1/16au/
/homework/hw4_fooView.png&#34; alt=&#34;Closeup of Item View&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;screenshot-of-the-main-activity&#34;&gt;Screenshot of the Main Activity&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://courses.cs.washington.edu/courses/cse390a1/16au/
/homework/hw4_screenshot.png&#34; alt=&#34;Screenshot&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Homework 3</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-3/</link>
      <pubDate>Tue, 18 Oct 2016 16:05:07 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-3/</guid>
      <description>

&lt;h1 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h1&gt;

&lt;p&gt;Check out the branch &lt;code&gt;failing-tests-1&lt;/code&gt; from the mdr-original project you built
for Homework 1. Many tests should fail. Fix both the tests in the &lt;code&gt;android&lt;/code&gt; and
&lt;code&gt;androidTests&lt;/code&gt; configurations. Some rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;DO NOT CHANGE THE TESTS&lt;/strong&gt;: You should not have to edit any test code to
get these to pass. All changes should be made in non-test Java files and in
xml files. If you think you found a reason you need to change test code, and
you REALLY REALLY REALLY think you&amp;rsquo;re right, email me and ask.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DO NOT LOOK AT THE DIFF&lt;/strong&gt;: This is a git repo. The nature of version
control allows you to fix all the tests via nothing more than git trickery.
This would be super lame, however. Android is something where you learn by
doing. If you cheat, you&amp;rsquo;re only hurting yourself. Further, these
assignments are largely optional. You could just not do it and save the
effort you think you&amp;rsquo;re saving by using the diff. If you&amp;rsquo;re taking the time
to revert the diff and find yourself feeling clever, that feeling might be
misplaced.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;backstory&#34;&gt;Backstory&lt;/h1&gt;

&lt;p&gt;An incompetent collaborator has gotten ahold of the
&lt;a href=&#34;https://github.com/srsudar/mdr-original&#34;&gt;mdr-original&lt;/a&gt; project. Thinking
themselves brilliant, they&amp;rsquo;ve made loads of edits but never run the tests. &amp;lsquo;I
am god&amp;rsquo;s gift to Android programming&amp;rsquo;, you imagine them saying as they type
&lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Being the selfless hero that you are, it falls to you to save the project from
incompetence. You clench your jaw, imagine yourself on a mountain before a flag
waving triumphantly in the wind, and with a steely gaze you get to work.&lt;/p&gt;

&lt;h1 id=&#34;the-how&#34;&gt;The &amp;lsquo;How&amp;rsquo;&lt;/h1&gt;

&lt;p&gt;The broken tests are on the branch called &lt;code&gt;failing-tests-1&lt;/code&gt;. Assuming you are
using &lt;code&gt;git&lt;/code&gt; from the command line, you would run this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git fetch
git checkout failing-tests-1
git branch # should output &#39;*failing-tests-1&#39; or similar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the code in Android Studio. You should encounter a build error complaining
about a tool not found (unless you&amp;rsquo;d installed it previously).  This was
intentional. &amp;gt;:) In the real world you&amp;rsquo;ll have to fix a lot of these types of
errors. Better to get comfortable with them when there&amp;rsquo;s someone you can ask
(me).&lt;/p&gt;

&lt;p&gt;There are two types of tests in Android Studio: &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;androidTest&lt;/code&gt;.
&lt;code&gt;test&lt;/code&gt; are unit tests that can run on the JVM. In this case we&amp;rsquo;ve configured
them to use Robolectric (more on this next week). &lt;code&gt;androidTest&lt;/code&gt; are tests that
need to run on an actual device. To run these you&amp;rsquo;ll need either a physical
device or an emulator.&lt;/p&gt;

&lt;p&gt;Right click on the &lt;code&gt;android&lt;/code&gt; tests and click &amp;lsquo;Run Tests&amp;rsquo;. &lt;strong&gt;29 tests should
fail&lt;/strong&gt;. Your job is to get them passing. Fixing one bug might fix more than one
tests, so it&amp;rsquo;s not as bad as it may seem at first.&lt;/p&gt;

&lt;p&gt;Right click on the &lt;code&gt;androidTest&lt;/code&gt; tests and click &amp;lsquo;Run Tests&amp;rsquo;. &lt;strong&gt;1 test should
fail&lt;/strong&gt;. You need an emulator or physical device for this one.&lt;/p&gt;

&lt;p&gt;Look at the logs for the errors. This will be helpful in many cases, and will
tell you were to look. Most of these tests have to do with Android UI (e.g.
&lt;code&gt;View&lt;/code&gt;s), and one or two may pertain to the lifecycle.&lt;/p&gt;

&lt;p&gt;You should &lt;strong&gt;not need to edit the tests for any of these to pass&lt;/strong&gt;. If you
think you do, email me and I will tell you if I&amp;rsquo;ve made a mistake. I&amp;rsquo;ll forward
your email to the list, giving you credit. Tears of joy will be shed, glory
will be basked in. Life will be good. (But seriously, I don&amp;rsquo;t think you&amp;rsquo;ll need
to edit any tests.)&lt;/p&gt;

&lt;p&gt;You should also &lt;strong&gt;not look at the diff&lt;/strong&gt;. I could have done this in a way that
didn&amp;rsquo;t give you access to the git history. I didn&amp;rsquo;t think it was worth the
effort. If you&amp;rsquo;re cheating, you&amp;rsquo;re only hurting yourself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;See the tl;dr section for more on the rules.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don&amp;rsquo;t forget that UIs are generally specified two places:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An xml file, e.g. &lt;code&gt;res/layout/activity_main.xml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A Java Activity, e.g. &lt;code&gt;org/mamasdelrio/android/MainActivity.java&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You&amp;rsquo;ll have to edit more than these files, but those are good places to start.&lt;/p&gt;

&lt;p&gt;If you get stuck, &lt;a href=&#34;https://catalyst.uw.edu/gopost/conversation/sudars/974700&#34;&gt;ask questions on this thread on the message
board&lt;/a&gt;. If that
doesn&amp;rsquo;t work or you don&amp;rsquo;t feel comfortable posting there, I&amp;rsquo;m also happy to
field emails.&lt;/p&gt;

&lt;h1 id=&#34;the-why&#34;&gt;The &amp;lsquo;Why&amp;rsquo;&lt;/h1&gt;

&lt;p&gt;These tests try to give you more exposure to UI, &lt;code&gt;View&lt;/code&gt;s, and &lt;code&gt;Activity&lt;/code&gt;s. Next
week you&amp;rsquo;ll have to create UIs (with tests!) from scratch yourself. Use this to
get accustomed to how everything works together.&lt;/p&gt;

&lt;h1 id=&#34;submitting&#34;&gt;Submitting&lt;/h1&gt;

&lt;p&gt;Fork the repo on github and submit your changes to a &lt;code&gt;failing-tests-1&lt;/code&gt; branch
there. &lt;a href=&#34;https://help.github.com/articles/fork-a-repo/&#34;&gt;Here is a guide on github
forking&lt;/a&gt;. Email me the link with
&amp;lsquo;HW 3: Submission&amp;rsquo; in the subject.&lt;/p&gt;

&lt;p&gt;I recognize this is a bit of a git-heavy and github-heavy class if you&amp;rsquo;re not
familiar with these tools. If you find this overwhelming, email me and I will
try to help you understand them. These are things that you&amp;rsquo;ll be better off
knowing, and I am consciously trying to encourage that you become comfortable
with them. If you &lt;strong&gt;really&lt;/strong&gt; don&amp;rsquo;t want to use github, you can email me a patch
file with the same subject as above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Homework 2</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-2/</link>
      <pubDate>Wed, 12 Oct 2016 08:34:52 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-2/</guid>
      <description>&lt;p&gt;Homework 2 is to choose an open source Android project and build it locally.
I&amp;rsquo;ve &lt;a href=&#34;https://catalyst.uw.edu/gopost/board/sudars/43331/&#34;&gt;started a discussion
board&lt;/a&gt; for the course and
&lt;a href=&#34;https://catalyst.uw.edu/gopost/conversation/sudars/973883&#34;&gt;started a thread&lt;/a&gt;
where I&amp;rsquo;d like people to post the projects that they choose.&lt;/p&gt;

&lt;p&gt;Homework 2 (assigned on 2016-10-11) is to find an open source Android Project,
build it locally, and run it on your device/emulator. Some will be easier than
others. Some may be really hard. &lt;strong&gt;When you&amp;rsquo;ve chosen and built a project, post
it on the &lt;a href=&#34;https://catalyst.uw.edu/gopost/conversation/sudars/973883&#34;&gt;Homework 2
thread&lt;/a&gt; on the
message board.&lt;/strong&gt; I&amp;rsquo;m curious to see what you choose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Only choose a project someone else has posted if you have already tried a
different project but haven&amp;rsquo;t been able to get it working.&lt;/strong&gt; If you&amp;rsquo;re
re-posting a project, include the previous project that you tried and the error
that kept you from building it. I basically just don&amp;rsquo;t want the first person
that posts a simple-to-build project to ruin the experience for someone else.&lt;/p&gt;

&lt;p&gt;In the real world if you&amp;rsquo;re working on an Android project, odds are you&amp;rsquo;ll
first have to build someone else&amp;rsquo;s existing code. It&amp;rsquo;s a good idea to get
familiar with it. If you&amp;rsquo;re choosing a project from github, check out the
README for a &amp;ldquo;Building&amp;rdquo; section or something similar, as projects will
frequently include pointers on vagaries of the build.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Homework 1</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-1/</link>
      <pubDate>Tue, 04 Oct 2016 17:31:19 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-1/</guid>
      <description>&lt;p&gt;Your homework for this week is to get your dev environment set up. Once it is
running, create a new app like I demonstrated in the slides (Lecture 1, see
previous post) and run it on either your device or an emulator.&lt;/p&gt;

&lt;p&gt;After that, download and open this project in Android Studio:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/srsudar/mdr-original&#34;&gt;https://github.com/srsudar/mdr-original&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run the tests and run the app on your device or emulator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you get stuck email me and I will help you!!!&lt;/strong&gt; There is nothing worse
than being stuck on something like configuration or not being able to run code
that other people can run. If any of this is confusing (i.e. how do I download
and open a project?), email me and I will explain it better!&lt;/p&gt;

&lt;p&gt;Right away with the &lt;code&gt;mdr-original&lt;/code&gt; project someone got an error saying that
android-22 was not found on their machine. This means the SDK for Android
version 22 is not installed, and many of you will likely see the same error.
This is not an error with the app but with your build environment, and is one
of the most common types of Android errors. Launch the SDK manager (as shown in
the slides), and install version 22. It should then work (or at least that
error should go away).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>