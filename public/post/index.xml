<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on CSE 390 A1: Android Programming</title>
    <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/</link>
    <description>Recent content in Posts on CSE 390 A1: Android Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Nov 2016 13:25:48 -0800</lastBuildDate>
    <atom:link href="https://courses.cs.washington.edu/courses/cse390a1/16au/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Week 9</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-9/</link>
      <pubDate>Tue, 29 Nov 2016 13:25:48 -0800</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-9/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;This week we talked about persisting data. This is important if you want state
saved across system and app restarts. Most apps will want to store something on
disk, even if it&amp;rsquo;s not a main feature of the app.&lt;/p&gt;

&lt;p&gt;Here are the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/12Rjw6ZA27teKHc6ei59Op7Axr5x964jFtqZDGG-6R4Y/edit?usp=sharing&#34;&gt;Lecture 9: Persisting
Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/training/basics/data-storage/shared-preferences.html&#34;&gt;Saving Key-Value
Sets&lt;/a&gt;:
Android docs on saving key-values. Covers &lt;code&gt;SharedPreferences&lt;/code&gt; especially.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/training/basics/data-storage/databases.html&#34;&gt;Saving Data in SQL
Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://firebase.google.com/docs/database/&#34;&gt;Firebase Realtime Database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Week 8</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-8/</link>
      <pubDate>Sun, 27 Nov 2016 16:32:18 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-8/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;This week we talked about testing. Here are the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1lNyuhuuRNBCjilPvZuGSQ_hQTjVrSpmKH5-ztzAckgQ/edit?usp=sharing&#34;&gt;Lecture 8:
Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Week 7</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-7/</link>
      <pubDate>Tue, 15 Nov 2016 09:30:54 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-7/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;This week we talked about processes, threads, and accessing the network.&lt;/p&gt;

&lt;p&gt;Here are the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/13SHBZTrgCXrZTOw9YkpkDQ5DGP_WvS6Fm1AtDekNjmk/edit?usp=sharing&#34;&gt;Lecture 7: Threading and
Network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://randomdotnext.com/retrofit-rxjava/&#34;&gt;Parsing JSON with Retrofit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://square.github.io/retrofit/&#34;&gt;Retrofit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.stablekernel.com/replace-asynctask-asynctaskloader-rx-observable-rxjava-android-patterns/&#34;&gt;RxJava
Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://randomdotnext.com/retrofit-rxjava/&#34;&gt;RxJava and REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.grokkingandroid.com/using-loaders-in-android/&#34;&gt;Tutorial on
Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.androiddesignpatterns.com/2012/08/implementing-loaders.html&#34;&gt;Tutorial on implementing
Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/training/volley/index.html&#34;&gt;Volley&lt;/a&gt;: A
workhorse networking library commonly used in Android projects, though we
didn&amp;rsquo;t discuss it in class. Unlike Retrofit, it is built for general
requests rather than specifically for parsing JSON.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Week 6</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-6/</link>
      <pubDate>Thu, 10 Nov 2016 10:21:48 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-6/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;This week we talked about java compilation, classpaths, and the Android build
system. We even dived into the Android SDK, using a JAR viewer to look at the
&lt;code&gt;Throw new RuntimeException(&amp;quot;Stub!&amp;quot;)&lt;/code&gt; code in every method call of the Android
SDK. Such fun. Here is a link to the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1DZ0RjEiTwwyJrn30V640NOE8NPmIY615yQ3TCJND0Ck/edit?usp=sharing&#34;&gt;Lecture 6: Building and
Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://trickyandroid.com/the-dark-world-of-jack-and-jill/&#34;&gt;The Dark Side of Jack and
Jill&lt;/a&gt;:
Great post describing the new jack compiler from the Android team. To get
into the meat of jack, it first covers in detail the classic compilation
toolchain.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Week 5</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-5/</link>
      <pubDate>Tue, 01 Nov 2016 14:02:23 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-5/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;Today we talked about designing an app. Here are the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1JbBoJ7OQ-DTXnoQ1DlfMFtqVEUA4J6OXE5cZsfP1gwY/edit?usp=sharing&#34;&gt;Lecture 5: Designing an
App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the questions that came up was how does Mockito do its magic. The
specific point was in an example like this one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Random mockRandom = mock(Random.class);
int nextInt = 5;
when(mockRandom.nextInt()).thenReturn(nextInt);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How does Mockito take an int and apply &lt;code&gt;thenReturn()&lt;/code&gt; successfully? In other
words, say that you break down the above example to the following. How crazy
does this look, when really this is exactly what you are doing?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Random mockRandom = mock(Random.class);
int nextInt = 5;
int originalAnswer = mockRandom.nextInt();
when(originalAnswer).thenReturn(nextInt);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I.e. you are basically saying &lt;code&gt;when(5).thenReturn(nextInt)&lt;/code&gt;, which makes no
sense at all unless you consider the lines around it. I believe the way this
works is that when you call a method on a mock, it obeys previously determined
behavior (e.g. it returns the value you told it to return), &lt;strong&gt;or&lt;/strong&gt; it flags
that stubbing has begun, and it will error if stubbing has not completed. Two
examples. The code above, with the &lt;code&gt;when(5)&lt;/code&gt; example, does succeed and behaves
as expected, as the first example. This code, however, will fail with a
&lt;code&gt;MissingMethodInvocationException&lt;/code&gt; error. Clearly Mockito is tracking your
stubbing progress, since you haven&amp;rsquo;t called any methods on the mock yet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Random mockRandom = mock(Random.class);
int nextInt = 5;
int originalAnswer = 5;
when(originalAnswer).thenReturn(nextInt);
// Crash due to MissingMethodInvocationException
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code, meanwhile, will fail since we&amp;rsquo;ve begun stubbing with an invocation
of a method on the mock class (the call to &lt;code&gt;mockRandom.nextInt()&lt;/code&gt;) and called
&lt;code&gt;when()&lt;/code&gt;, but we haven&amp;rsquo;t called &lt;code&gt;thenReturn()&lt;/code&gt; or similar. It will fail with an
&lt;code&gt;UnfinishedStubbingException&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Random mockRandom = mock(Random.class);
int nextInt = 5;
int originalAnswer = mockRandom.nextInt();
when(originalAnswer);
// Crash due to UnfinishedStubbingException
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, calling a method on a mock seems to flag that, if stubbing is initiated
with a call to &lt;code&gt;when()&lt;/code&gt;, the last called method is the one we want to save an
answer for. Once that is begun via the call to &lt;code&gt;when()&lt;/code&gt;, it must be completed
via a call to &lt;code&gt;thenReturn()&lt;/code&gt; or a similar method.&lt;/p&gt;

&lt;p&gt;If you want to dive real deep down the rabbit hole, take a look at the
&lt;a href=&#34;https://github.com/mockito/mockito/blob/release/2.x/src/main/java/org/mockito/internal/MockitoCore.java#L68&#34;&gt;implementation&lt;/a&gt;
of the &lt;code&gt;when&lt;/code&gt; method on github.&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.remind.com/android-code-that-scales/&#34;&gt;MVP on Android with Great
Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://antonioleiva.com/mvp-android/&#34;&gt;More MVP on Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/1317693/what-is-model-view-presenter&#34;&gt;MVP in
General&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Week 4</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-4/</link>
      <pubDate>Wed, 19 Oct 2016 11:51:32 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-4/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;Today we talked mostly about &lt;code&gt;ListView&lt;/code&gt;, &lt;code&gt;Adapter&lt;/code&gt;s, and &lt;code&gt;RecyclerView&lt;/code&gt;. Plus a
bit on &lt;code&gt;Fragment&lt;/code&gt;s. This felt like the most boring lecture to date to me. Too
much stepping through too much code, seemed to be the consensus. Here are the
code-heavy slides.&lt;/p&gt;

&lt;p&gt;Here are the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1HWFSFgZXn0Ncr_qfrdBjYq_Ho_YehIfTldghHxpVigc/edit?usp=sharing&#34;&gt;Lecture 4: Advanced
UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;p&gt;General links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/training/material/lists-cards.html&#34;&gt;Creating Lists and
Cards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://saulmm.github.io/mastering-coordinator&#34;&gt;Mastering Coordinator
Layout&lt;/a&gt;: A good overview,
with gifs, about &lt;a href=&#34;https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html&#34;&gt;Coordinator
Layout&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In class today I talked about how I don&amp;rsquo;t like &lt;code&gt;Fragment&lt;/code&gt;s. I think they are
more trouble than they are worth, and come with a very complex lifecycle that
is the source of many bugs. Here are some links discussing similar things.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/square-corner-blog/advocating-against-android-fragments-81fd0b462c97#.3j91byiex&#34;&gt;Advocating Against Android
Fragments&lt;/a&gt;:
A really great overview on testable UI in Android, and the trouble &lt;code&gt;Fragment&lt;/code&gt;s
gave them. Highly recommended.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.briangriffey.com/blog/1&#34;&gt;No Fragments, Rich Views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xxv/android-lifecycle&#34;&gt;The Complete and Hairy Android
Lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Week 3</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-3/</link>
      <pubDate>Tue, 18 Oct 2016 16:03:20 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-3/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;This week we talked about Building a UI. Slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1Bz13hejFW1ylJgI_bnvmof7oaOcTVWFn6pLQgyLIeL0/edit?usp=sharing&#34;&gt;Lecture 3: Building a
UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A lot of people were gone for the career fair. Email me or come to office hours
if anything is confusing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week 2: The Lifecycle</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-2/</link>
      <pubDate>Wed, 12 Oct 2016 08:23:37 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-2/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;This week we talked about the Android lifecycle. Here is a link to the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1bKBzo0rbi8NsmZc15VpX6DXrIJ4zPMX71EBpYIR2k2o/edit#slide=id.g183ccd2a56_0_5&#34;&gt;Lecture 2: Android Lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve created a repo called &lt;a href=&#34;https://github.com/srsudar/cse390-android-playground&#34;&gt;cse390-android-playground&lt;/a&gt;
that I&amp;rsquo;ll keep updating over the course of the quarter to demonstrate small,
bite-sized pieces of code outside of a coherent app context. As the README
there indicates, it is organized by branches. This week check out
&lt;code&gt;intent-basics&lt;/code&gt; and &lt;code&gt;lifecycle-logs&lt;/code&gt; and mess around with the code.&lt;/p&gt;

&lt;p&gt;Here are some more links you might find useful. Some of the images on the
slides came from these pages, and they provide a lot more detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/guide/components/activities.html&#34;&gt;Activities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/training/basics/activity-lifecycle/index.html&#34;&gt;Activity Lifecycle
Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/training/basics/activity-lifecycle/starting.html&#34;&gt;Starting an
Activity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Office Hours Mondays 4-5</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/office-hours/</link>
      <pubDate>Fri, 07 Oct 2016 12:42:18 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/office-hours/</guid>
      <description>&lt;p&gt;Based on the Doodle poll, office hours will be &lt;strong&gt;Mondays, 4-5&lt;/strong&gt;. All the rooms
are booked, so for now we&amp;rsquo;ll just meet in &lt;strong&gt;CSE 214&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note that the office hours were formerly in the third floor breakout, but the
location has moved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Room Change: GUG 218</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/room-change/</link>
      <pubDate>Thu, 06 Oct 2016 08:27:31 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/room-change/</guid>
      <description>&lt;p&gt;To try and better accommodate overloads, we have moved rooms to &lt;a href=&#34;https://www.washington.edu/maps/#!/gug&#34;&gt;Guggenheim
218&lt;/a&gt;. It has windows and lacks a giant
pillar in the middle of the room, so that is a win.&lt;/p&gt;

&lt;p&gt;My inbox has been relatively quiet, given how finicky Android Studio can be. If
you get stuck, let me know.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week 1 Intro</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-1-intro/</link>
      <pubDate>Tue, 04 Oct 2016 16:54:01 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-1-intro/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Makeshift office hours this week on &lt;strong&gt;Wednesday, Oct 5, 1030-1130 in CSE
678&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Someone asked me after class if you should be able to build your own Android
App by the time the course is over. That should have been on my &amp;ldquo;goals of the
course slide&amp;rdquo;, as heck yes it is a goal. In fact, after Homework 1 you&amp;rsquo;ll have
already built your own app. It is crummy and boring, but built it you have. By
the time the course is over, hopefully you&amp;rsquo;ll be able to build your own app
that isn&amp;rsquo;t crummy or boring.&lt;/p&gt;

&lt;p&gt;This is a weird course because it is about a specific technology. The only way
you can really learn a technology is by using it. Writing code, running code,
encountering bugs that are confusing and beyond your control, being alternately
jubilant and miserable&amp;ndash;all these things are part of learning something like
Android. Unfortunately, for a once a week credit/no-credit class, we don&amp;rsquo;t have
a lab component and I don&amp;rsquo;t want to require a bunch of assignments, so I&amp;rsquo;m just
going to be standing in front of you talking. &lt;strong&gt;But you will only really learn
Android if you do the assignments and mess around with the code.&lt;/strong&gt; For that
reason I suggest you spend as much time as you can on the assignments until you
complete them.&lt;/p&gt;

&lt;h1 id=&#34;office-hours&#34;&gt;Office Hours&lt;/h1&gt;

&lt;p&gt;Please use &lt;a href=&#34;http://doodle.com/poll/2ap5tvbrekccm99n&#34;&gt;the Doodle poll&lt;/a&gt; to pick a
time that works for you.&lt;/p&gt;

&lt;p&gt;As we&amp;rsquo;re waiting for the final Doodle results to filter in, I&amp;rsquo;m going to have a
temporary office hours this week before we settle on a regular time.&lt;/p&gt;

&lt;p&gt;This week&amp;rsquo;s office hours is &lt;strong&gt;Oct 5, 1030-1130am in CSE 678&lt;/strong&gt;. This works
for most people according to the poll. If it doesn&amp;rsquo;t work for you, vote in the
Doodle!&lt;/p&gt;

&lt;p&gt;Feel free to bring your machines to have me help install Android Studio from
scratch or to have me help troubleshoot errors you&amp;rsquo;ve encountered doing
Homework 1. If you want to come and start Homework 1 with me sitting there,
just in case you encounter an error, that is fine by me too.&lt;/p&gt;

&lt;h1 id=&#34;slides&#34;&gt;Slides&lt;/h1&gt;

&lt;p&gt;Here are the lecture slides from this week.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1G6xdqkHpiOpb3667t3-fK9b_tRFS7z644RYGjYMDhE0/edit?usp=sharing&#34;&gt;Lecture 0:
Administrivia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1cTJ2wW5DHLl262TRqjKKlSLEsgW3gQECrQVF9gHvCf0/edit?usp=sharing&#34;&gt;Lecture 1: Android Dev 101 &amp;amp; App
Anatomy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;about-the-site&#34;&gt;About the Site&lt;/h1&gt;

&lt;p&gt;I made this site using &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/tanksuzuki&#34;&gt;Asuka Suzuki&lt;/a&gt; for his MIT-licensed
&lt;a href=&#34;http://themes.gohugo.io/hemingway/&#34;&gt;Hemingway
theme&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>