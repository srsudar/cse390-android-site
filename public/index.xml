<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSE 390 A1: Android Programming</title>
    <link>https://courses.cs.washington.edu/courses/cse390a1/16au/</link>
    <description>Recent content on CSE 390 A1: Android Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Dec 2016 09:59:06 -0800</lastBuildDate>
    <atom:link href="https://courses.cs.washington.edu/courses/cse390a1/16au/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Homework 10</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-10/</link>
      <pubDate>Tue, 06 Dec 2016 09:59:06 -0800</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-10/</guid>
      <description>

&lt;h1 id=&#34;final-project-submission&#34;&gt;Final Project Submission&lt;/h1&gt;

&lt;p&gt;For the final project you had the option of either following along with me,
making a &amp;lsquo;Github Hotness&amp;rsquo; app, or of building an app of your own design. For
your final homework, &lt;strong&gt;send me a link to your repo for the project&lt;/strong&gt; with a
description of the app.&lt;/p&gt;

&lt;p&gt;Also, &lt;strong&gt;PLEASE&lt;/strong&gt; complete the course evaluation. See my email for more
information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week 10</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-10/</link>
      <pubDate>Mon, 05 Dec 2016 13:44:53 -0800</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-10/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;In our last lecture we talked about the glory of &lt;code&gt;WebView&lt;/code&gt;, accessing hardware,
and &lt;code&gt;Service&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Here are the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1cN8LrEVbjXWIMRDMPDkeaMo3tMS1IgWrcxknmKD-C8I/edit?usp=sharing&#34;&gt;Lecture 10: Hardware, Services, Odds and
Ends&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;p&gt;*
&lt;a href=&#34;https://developer.android.com/reference/android/webkit/WebView.html&#34;&gt;&lt;code&gt;WebView&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Homework 9</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-9/</link>
      <pubDate>Tue, 29 Nov 2016 13:30:52 -0800</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-9/</guid>
      <description>

&lt;h1 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h1&gt;

&lt;p&gt;Implement a &lt;code&gt;PreferenceAccessor&lt;/code&gt; object to hide the complexities of dealing
with &lt;code&gt;SharedPreferences&lt;/code&gt; every time you want to get a value. A single getter
and a single test is sufficient. Send me a link to your repo.&lt;/p&gt;

&lt;h1 id=&#34;long-with-lots-of-detail&#34;&gt;Long with Lots of Detail&lt;/h1&gt;

&lt;p&gt;This week your task is to build something that saves data to disk. If you&amp;rsquo;re
creating your own app, it can be whatever you need for your use-case. For
people following along with the Github Hotness application, we&amp;rsquo;ll be making a
&lt;code&gt;PreferenceAccessor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.android.com/reference/android/content/SharedPreferences.html&#34;&gt;&lt;code&gt;SharedPreferences&lt;/code&gt;&lt;/a&gt;
are used to store key-value pairs on Android. A potential problem with
&lt;code&gt;SharedPreferences&lt;/code&gt; is that you need your keys to be constant strings. If you
are accessing one of your key-values in various places around your app, you can
wind up with similar code all over the place. This is a no-no. Instead, I like
to bundle up this functionality in an object that I call an accessor.  This
&lt;code&gt;PreferenceAccessor&lt;/code&gt; will be responsible for all the getting and setting of
your key values.&lt;/p&gt;

&lt;p&gt;This is complicated somewhat by the fact that many of the &lt;code&gt;SharedPreferences&lt;/code&gt;
methods are &lt;code&gt;static&lt;/code&gt;. &lt;code&gt;static&lt;/code&gt; things are hard to test, since many mocking
frameworks (including Mockito) cannot mock them out. This means it can be hard
to inject behavior/state into tests if they rely on &lt;code&gt;static&lt;/code&gt; fields and
methods.&lt;/p&gt;

&lt;p&gt;Luckily for us, this can be easily overcome with a level of indirection. Full
examples are in the
&lt;a href=&#34;https://docs.google.com/presentation/d/1lNyuhuuRNBCjilPvZuGSQ_hQTjVrSpmKH5-ztzAckgQ/edit?usp=sharing&#34;&gt;slides&lt;/a&gt;,
but I&amp;rsquo;m not including that here because it would be too easy to just copy and
paste. Instead I am providing a similar example.&lt;/p&gt;

&lt;p&gt;Imagine we have the following class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class VendingMachineQuerier {
  public int getNumberCandyBars(String manufacturer) {
    VendingMachine machine = MachineFactory.getVendingMachine();
    return machine.getNumberForManufacture(manufacturer);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use this class to get the number of candy bars in the vending machine
made by &lt;code&gt;Mars&lt;/code&gt;, e.g.&lt;/p&gt;

&lt;p&gt;But how can we test this? The standard way is to just pass in a
&lt;code&gt;VendingMachine&lt;/code&gt; object, like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class VendingMachineQuerier {
  public int getNumberCandyBars(String manufacturer, VendingMachine machine) {
    return machine.getNumberForManufacture(manufacturer);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would certainly work, and in many cases it is the right answer. Imagine
that for some reason you didn&amp;rsquo;t want to do that. In the case of
&lt;code&gt;SharedPreferences&lt;/code&gt;, e.g., I find it can be tedious on the caller and is better
centralized elsewhere.&lt;/p&gt;

&lt;p&gt;We can instead create a package private method that returns a &lt;code&gt;VendingMachine&lt;/code&gt;.
In the main code we&amp;rsquo;ll have the real implementation, and in the test code we
will override that to provide a stub:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class VendingMachineQuerier {
  VendingMachine getVendingMachine() {
    return MachineFactory.getVendingMachine();
  }

  public int getNumberCandyBars(String manufacturer) {
    VendingMachine machine = getVendingMachine();
    return machine.getNumberForManufacture(manufacturer);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our test package, we then subclass &lt;code&gt;VendingMachineQuerier&lt;/code&gt; and override this
getter method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class TestVendingMachineQuerier {
  VendingMachine vendingMachineMock;

  public TestVendingMachineQuerier(VendingMachine machineMock) {
    this.vendingMachineMock = machineMock;
  }

  VendingMachine getVendingMachine() {
    return this.vendingMachineMock;
  }

  public int getNumberCandyBars(String manufacturer) {
    VendingMachine machine = getVendingMachine();
    return machine.getNumberForManufacture(manufacturer);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have a way to return a known object rather than the result of a static
factory call. Our tests will then be on this test object rather than the
original:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class VendingMachineQuerierTest {
  VendingMachineQuerier querier;
  @Mock
  VendingMachine machineMock;

  @Before
  public void before() {
    MockitoAnnotations.initMocks(this);
    
    // We&#39;ll now use our injectable subclass rather than the original:
    querier = new TestVendingMachineQuerier(machineMock);
  }

  @Test
  public void nameMeWell() {
    // Here we will interact with querier and have machineMock to perform
    // assertions.
  }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Week 9</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-9/</link>
      <pubDate>Tue, 29 Nov 2016 13:25:48 -0800</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-9/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;This week we talked about persisting data. This is important if you want state
saved across system and app restarts. Most apps will want to store something on
disk, even if it&amp;rsquo;s not a main feature of the app.&lt;/p&gt;

&lt;p&gt;Here are the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/12Rjw6ZA27teKHc6ei59Op7Axr5x964jFtqZDGG-6R4Y/edit?usp=sharing&#34;&gt;Lecture 9: Persisting
Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/training/basics/data-storage/shared-preferences.html&#34;&gt;Saving Key-Value
Sets&lt;/a&gt;:
Android docs on saving key-values. Covers &lt;code&gt;SharedPreferences&lt;/code&gt; especially.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/training/basics/data-storage/databases.html&#34;&gt;Saving Data in SQL
Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://firebase.google.com/docs/database/&#34;&gt;Firebase Realtime Database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Homework 8</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-8/</link>
      <pubDate>Mon, 28 Nov 2016 13:29:37 -0800</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-8/</guid>
      <description>&lt;p&gt;No homework this week! Enjoy the break. If you are dying to work on something,
catch up on previous homework or work on your app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week 8</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-8/</link>
      <pubDate>Sun, 27 Nov 2016 16:32:18 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-8/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;This week we talked about testing. Here are the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1lNyuhuuRNBCjilPvZuGSQ_hQTjVrSpmKH5-ztzAckgQ/edit?usp=sharing&#34;&gt;Lecture 8:
Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Homework 7</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-7/</link>
      <pubDate>Tue, 15 Nov 2016 18:04:43 -0800</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-7/</guid>
      <description>

&lt;h1 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h1&gt;

&lt;p&gt;Write code to parse a JSON search result from the Github search API. I
recommend following &lt;a href=&#34;http://randomdotnext.com/retrofit-rxjava/&#34;&gt;this tutorial&lt;/a&gt;.
&lt;a href=&#34;https://api.github.com/search/repositories?sort=stars&amp;amp;order=desc&amp;amp;q=created:%3E2016-10-01&amp;amp;per_page=25&#34;&gt;Here is a good
URL&lt;/a&gt;
for results that are a list of repos.&lt;/p&gt;

&lt;h1 id=&#34;muy-largo&#34;&gt;Muy Largo&lt;/h1&gt;

&lt;p&gt;This week I want you to write a class that makes an HTTP GET request to a JSON
endpoint and parses the response to turn it into a Java object.&lt;/p&gt;

&lt;p&gt;There are lots of ways you could go about doing this. I suggest using
&lt;a href=&#34;https://square.github.io/retrofit/&#34;&gt;Retrofit&lt;/a&gt; and
&lt;a href=&#34;https://github.com/ReactiveX/RxJava&#34;&gt;RxJava&lt;/a&gt;. A good tutorial on how to use
these together can be found &lt;a href=&#34;http://randomdotnext.com/retrofit-rxjava/&#34;&gt;here&lt;/a&gt;.
When I wrote my version of the app, I basically followed that.&lt;/p&gt;

&lt;h2 id=&#34;aside-json-endpoints&#34;&gt;Aside: JSON Endpoints&lt;/h2&gt;

&lt;p&gt;JSON is an extremely common data serialization format. This means it is easy to
go from objects in code to something that can be written to disk (e.g. to save
as a file or send over the network) and then back into code. I won&amp;rsquo;t give a
whole tutorial here, but it basically lets you use &lt;code&gt;[ ]&lt;/code&gt; to create an array (or
a list of items), and &lt;code&gt;{ }&lt;/code&gt; to define a map.&lt;/p&gt;

&lt;p&gt;For example, go to
&lt;a href=&#34;https://api.github.com/users/srsudar/repos&#34;&gt;api.github.com/users/srsudar/repos&lt;/a&gt;
and look at the response. It is a blob of text. If you install a Chrome
extension &lt;a href=&#34;https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en&#34;&gt;like this
one&lt;/a&gt;
you can view the response with formatting and color. It is nice. At the time of
this writing, I see something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
  {
    &amp;quot;id&amp;quot;: 18454181,
    &amp;quot;name&amp;quot;: &amp;quot;android-primer&amp;quot;,
    &amp;quot;full_name&amp;quot;: &amp;quot;srsudar/android-primer&amp;quot;,
    [ ... snip long code ... ]
  },
  {
    &amp;quot;id&amp;quot;: 22605955,
    &amp;quot;name&amp;quot;: &amp;quot;android-should-know&amp;quot;,
    &amp;quot;full_name&amp;quot;: &amp;quot;srsudar/android-should-know&amp;quot;
    [ ... snip long code ... ]
  },
  [ ... snip more items ... ]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This represents an array of repositories. We know it is an array because the
response starts and ends with &lt;code&gt;[ ]&lt;/code&gt;. Each element in the array is an object
(because it starts with &lt;code&gt;{ }&lt;/code&gt;) that has lots of properties. In this case I&amp;rsquo;m
only showing &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;full_name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Many, many services expose JSON endpoints for you to consume and mess around
with. You can see the whole Github API description
&lt;a href=&#34;https://developer.github.com/v3/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-does-it-mean-to-fetch-json-on-android&#34;&gt;What Does it Mean to Fetch JSON on Android?&lt;/h2&gt;

&lt;p&gt;There are several steps required to fetch JSON on Android:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get a background thread: Because you can&amp;rsquo;t execute network requests on the
main thread, you&amp;rsquo;ll need to do something to ensure you make the request on a
background thread.&lt;/li&gt;
&lt;li&gt;Issue the network request: Now you have to issue an HTTP GET request to your
given endpoint.&lt;/li&gt;
&lt;li&gt;Get the response as a String: HTTP requests respond with a message body. If
you&amp;rsquo;re talking to a JSON endpoint, this is interpreted as a String.&lt;/li&gt;
&lt;li&gt;Parse the response: Once you get the response body as a String, you need to
parse that String into a JSON object. If you&amp;rsquo;re working with JavaScript,
that is easy, as JSON is a first class citizen in JavaScript. However, since
Java is a typed languaged, you need to go through an extra step of
converting the response into Java obects. In our Github API demo above, this
might mean a &lt;code&gt;Repo&lt;/code&gt; object with an &lt;code&gt;int&lt;/code&gt; field &lt;code&gt;id&lt;/code&gt;, a &lt;code&gt;String&lt;/code&gt; field
&lt;code&gt;name&lt;/code&gt;, and a &lt;code&gt;String&lt;/code&gt; field &lt;code&gt;full_name&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;retrofit-and-rxjava&#34;&gt;Retrofit and RxJava&lt;/h2&gt;

&lt;p&gt;In class I gave an example using Retrofit and RxJava. Retrofit takes care of
steps 2, 3, and 4 for you. All you have to do is provide the &lt;code&gt;Repo&lt;/code&gt; object (or
a similar object for a different JSON endpoint) and make the request.&lt;/p&gt;

&lt;p&gt;You can use RxJava to handle step 1&amp;ndash;making a request on a background thread.&lt;/p&gt;

&lt;p&gt;Using the two of them together you can handle the steps 1-4 and use JSON on
Android. Neat.&lt;/p&gt;

&lt;h2 id=&#34;goal-this-week&#34;&gt;Goal this Week&lt;/h2&gt;

&lt;p&gt;The goal for this week is to write Android code that will talk to and parse the
Github API like the one above. This will be a lot of following code tutorials.
I recommend &lt;a href=&#34;http://randomdotnext.com/retrofit-rxjava/&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I would start by following that tutorial exactly and querying that API. Then,
if you&amp;rsquo;re following along with the GithubHotness application I&amp;rsquo;m creating for
the course, you&amp;rsquo;ll want to update it to use the &lt;code&gt;/search/repositories&lt;/code&gt; API to
query by date created and sort by the number of stars.&lt;/p&gt;

&lt;p&gt;A full search URL might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://api.github.com/search/repositories?sort=stars&amp;amp;order=desc&amp;amp;q=created:%3E2016-10-01&amp;amp;per_page=25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that that we are adding &amp;lsquo;query parameters&amp;rsquo; to the URL. Query parameters
are the things following the &lt;code&gt;?&lt;/code&gt; in the URL. They are key-value pairs. Each
pair is separated by &lt;code&gt;&amp;amp;&lt;/code&gt;. So you could have something like
&lt;code&gt;example.com?foo=fooVal&amp;amp;bar=barVal&lt;/code&gt;. Here we have two query parameters: &lt;code&gt;foo&lt;/code&gt;
and &lt;code&gt;bar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In that URL we have &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;, and &lt;code&gt;per_page&lt;/code&gt;. Documentation on the
search API can be found &lt;a href=&#34;https://developer.github.com/v3/search/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To pass these query parameters to Retrofit, you&amp;rsquo;ll need to use the &lt;code&gt;@Query&lt;/code&gt;
annotation. In my project I&amp;rsquo;ve wrapped them in something called
&lt;code&gt;GithubService&lt;/code&gt;, which looks like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String SEARCH = &amp;quot;/search/repositories&amp;quot;;

@GET(SEARCH)
Observable&amp;lt;SearchResponse&amp;gt; searchMostPopularRepos(
    @Query(&amp;quot;sort&amp;quot;) String sort,
    @Query(&amp;quot;order&amp;quot;) String order,
    @Query(&amp;quot;q&amp;quot;) String query,
    @Query(&amp;quot;per_page&amp;quot;) int perPage);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m returning a &lt;code&gt;SearchResponse&lt;/code&gt;, not a list of items. If you navigate to the
&lt;a href=&#34;https://api.github.com/search/repositories?sort=stars&amp;amp;order=desc&amp;amp;q=created:%3E2016-10-01&amp;amp;per_page=25&#34;&gt;search url&lt;/a&gt;
you&amp;rsquo;ll see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;total_count&amp;quot;: 1661015,
  &amp;quot;incomplete_results&amp;quot;: false,
  &amp;quot;items&amp;quot;: []
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The endpoint isn&amp;rsquo;t just giving you a list of repositories, it&amp;rsquo;s actually giving
you some metadata (the &lt;code&gt;total_count&lt;/code&gt; and &lt;code&gt;incomplete_results&lt;/code&gt; properties) and
then the results themselves in the &lt;code&gt;items&lt;/code&gt; property. You need to help Retrofit
know how to parse this. In my case, I care only about the repositories
themselves, so I just have a &lt;code&gt;List&amp;lt;Repo&amp;gt;&lt;/code&gt; field with an annotation telling
Retrofit that this is called &lt;code&gt;items&lt;/code&gt; in the response:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SearchResponse {
  @SerializedName(&amp;quot;items&amp;quot;)
  private ArrayList&amp;lt;Repo&amp;gt; repos;

  public List&amp;lt;Repo&amp;gt; getRepos() {
    return repos;
  }

  public void setRepos(ArrayList&amp;lt;Repo&amp;gt; repos) {
    this.repos = repos;
  }

  @Override
  public String toString() {
    return &amp;quot;SearchResponse{&amp;quot; +
        &amp;quot;repos=&amp;quot; + repos +
        &#39;}&#39;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your assignment this week is to follow the tutorial, using the code samples
like I&amp;rsquo;ve provided here, to parse a list of repositories from a search result.
Ideally, you&amp;rsquo;d plug this into your &lt;code&gt;RecyclerView&lt;/code&gt; from last week, but that
might be pushing it. For now, if you are just able to parse the results and log
them, that will be a good step.&lt;/p&gt;

&lt;p&gt;If you get stumped, ask me or take a look at how I did it in the &lt;a href=&#34;https://github.com/srsudar/GithubHotness&#34;&gt;GithubHotness
repo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week 7</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-7/</link>
      <pubDate>Tue, 15 Nov 2016 09:30:54 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-7/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;This week we talked about processes, threads, and accessing the network.&lt;/p&gt;

&lt;p&gt;Here are the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/13SHBZTrgCXrZTOw9YkpkDQ5DGP_WvS6Fm1AtDekNjmk/edit?usp=sharing&#34;&gt;Lecture 7: Threading and
Network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://randomdotnext.com/retrofit-rxjava/&#34;&gt;Parsing JSON with Retrofit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://square.github.io/retrofit/&#34;&gt;Retrofit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.stablekernel.com/replace-asynctask-asynctaskloader-rx-observable-rxjava-android-patterns/&#34;&gt;RxJava
Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://randomdotnext.com/retrofit-rxjava/&#34;&gt;RxJava and REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.grokkingandroid.com/using-loaders-in-android/&#34;&gt;Tutorial on
Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.androiddesignpatterns.com/2012/08/implementing-loaders.html&#34;&gt;Tutorial on implementing
Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/training/volley/index.html&#34;&gt;Volley&lt;/a&gt;: A
workhorse networking library commonly used in Android projects, though we
didn&amp;rsquo;t discuss it in class. Unlike Retrofit, it is built for general
requests rather than specifically for parsing JSON.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Homework 6</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-6/</link>
      <pubDate>Thu, 10 Nov 2016 11:55:37 -0800</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-6/</guid>
      <description>

&lt;h1 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Send me an email addressing the three bullet points below in the Dependency
Hell section.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Why are you getting that error&lt;/li&gt;
&lt;li&gt;What libraries are causing the problem&lt;/li&gt;
&lt;li&gt;How would you fix it?&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Send me an email with a link to your repo test class for a modal view like I
describe below. If you are doing your own app, send me a file with tests.
They should pass.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;long-form&#34;&gt;Long Form&lt;/h1&gt;

&lt;p&gt;This week the plan is to write some Robolectric tests. If you&amp;rsquo;re creating your
own app (as opposed to creating the Github repo browser like I am doing), you
should write tests that make sense for your app.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/robolectric/robolectric&#34;&gt;Robolectric&lt;/a&gt; lets us write unit
tests that don&amp;rsquo;t depend on the Android framework. Normally, Android code can
only run on an actual device. This is because, at compile time, the Android
java code comes from the SDK. The &lt;code&gt;.class&lt;/code&gt; files in the SDK, however, like the
&lt;code&gt;Activity.class&lt;/code&gt; file you reference when you &lt;code&gt;import android.app.Activity;&lt;/code&gt;, do
not have real implementations. They have the same signatures (i.e. the same
methods), but the implementations all are &lt;code&gt;throw new
RuntimeException(&amp;quot;Stub!&amp;quot;);&lt;/code&gt;. This means that you can&amp;rsquo;t actually run the java
code that you compile if you add this code to your runtime classpath. When you
run the code on a device, this isn&amp;rsquo;t a problem, as the Android &lt;code&gt;.class&lt;/code&gt; files
are provided by the Android device itself on the run time classpath.&lt;/p&gt;

&lt;p&gt;Robolectric changes this. It provides real implementations of the Android
&lt;code&gt;.class&lt;/code&gt; files, allowing us to run code on the Java Virtual Machine (JVM),
rather than the Dalvik VM that runs Android code on the device. If this sounds
complicated and confusing, it is. No need to worry if it doesn&amp;rsquo;t make complete
sense right away. The benefit to running it on the JVM is that you don&amp;rsquo;t need
to pull out your phone, hook it up, and wait for the APK to install just to run
a simple unit test. The other benefit is that Robolectric wraps some of the
Android code, allowing you acess to variables and objects that Android doesn&amp;rsquo;t
expose. This lets you write more meaningful assertions (in some cases).
Robolectric is widely used for Android unit tests. It isn&amp;rsquo;t the only option,
but it is very commonly used.&lt;/p&gt;

&lt;h1 id=&#34;tasks&#34;&gt;Tasks&lt;/h1&gt;

&lt;h2 id=&#34;1-dependency-hell&#34;&gt;1. Dependency Hell&lt;/h2&gt;

&lt;p&gt;First we&amp;rsquo;re look at one of the build issues I talked about in class. My version
of the Github repo browser is located at
&lt;a href=&#34;https://github.com/srsudar/GithubHotness&#34;&gt;github.com/srsudar/GithubHotness&lt;/a&gt;.
Clone this repo and pull the tags, then check out the tag
&lt;code&gt;guava-version-mismatch&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# From within the cloned repo
git pull origin --tags
git checkout guava-version-mismatch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll be in a detached HEAD state, but that&amp;rsquo;s ok. &lt;strong&gt;All of the following
commands assume you are in the top level of the repo (the one with the &lt;code&gt;.git/&lt;/code&gt;
directory).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s try running the tests from the command line, rather than from
Android Studio. This corresponds to a gradle task named &lt;code&gt;testDebugUnitTest&lt;/code&gt;.
If you have gradle installed, you can run &lt;code&gt;gradle :app:testDebugUnitTest&lt;/code&gt;.
However, this isn&amp;rsquo;t a perfect solution. For one, recall one of my primary
complaints about Eclipse in class&amp;ndash;it doesn&amp;rsquo;t readily give you a way to perform
clean, repeatable builds in a way that is separate from the UI. The command
above is similarly not ideal. It might work, but it won&amp;rsquo;t be completely
repeatable. Relying on the installed version of gradle is the problem
here&amp;ndash;what if collaborators use a different gradle version or different
settings? Maybe the builds will be subtly different in a way that is hard to
reproduce or leads to tricky bugs.&lt;/p&gt;

&lt;p&gt;To circumvent this, gradle typically ships with the so-called &amp;lsquo;gradle wrapper&amp;rsquo;.
(This isn&amp;rsquo;t the only benefit of using the wrapper, but it is a plus.) The
gradle wrapper is the file named &lt;code&gt;gradlew&lt;/code&gt; in the directory. It has executable
permissions and can be used as a replacement for the bare gradle command. So
instead of &lt;code&gt;gradle :app:testDebugUnitTest&lt;/code&gt;, you should run &lt;code&gt;./gradlew
:app:testDebugUnitTest&lt;/code&gt;. The &lt;code&gt;:app&lt;/code&gt; portion of the command tells gradle to look
in the app directory (or at the &lt;code&gt;app&lt;/code&gt; target), and the &lt;code&gt;:testDebugUnitTest&lt;/code&gt;
tells it to run the task called &lt;code&gt;testDebugUnitTest&lt;/code&gt;. If you type &lt;code&gt;./gradlew
:app:tasks&lt;/code&gt;, you will see a list of all the tasks in the &lt;code&gt;app&lt;/code&gt; target that you
can run.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;./gradlew :app:testDebugUnitTest&lt;/code&gt;. If you&amp;rsquo;ve checked out the
&lt;code&gt;guava-version-mismatch&lt;/code&gt; tag, you should see an error, complaining that there
is a mismatch with a dependency called guava.&lt;/p&gt;

&lt;p&gt;After you find that, run &lt;code&gt;./gradlew :app:dependencies&lt;/code&gt;. This will show you your
complete dependency tree for the various targets in the &lt;code&gt;app&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;Send me an email with the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is the meaning of the error that you are seeing when you try the
&lt;code&gt;testDebugUnitTest&lt;/code&gt; task? What is going on, and why is that a problem?
Google it if it isn&amp;rsquo;t obvious.&lt;/li&gt;
&lt;li&gt;What libraries are causing the conflict?&lt;/li&gt;
&lt;li&gt;What are some potential ways to fix this? This is the hardest part. You can
look at the &lt;code&gt;master&lt;/code&gt; branch to see what I eventually did.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;2-write-robolectric-tests-for-a-modal-recyclerview&#34;&gt;2. Write Robolectric Tests for a Modal RecyclerView&lt;/h1&gt;

&lt;p&gt;The real bulk of the assignment this week is going to be writing a small view,
and writing tests to go along with that view. The idea here is that a
RecyclerView (which you implemented over the past two weeks), is a great way to
display lists of items. However, when you display lists of items, you generally
need to handle a few other cases as well. For example, what if there are no
items to display? The default behavior is just to display nothing. That isn&amp;rsquo;t
ideal, as the user won&amp;rsquo;t know if there&amp;rsquo;s just nothing to view, if something has
gone wrong, etc. I like to handle four potential states when I am writing a
view to display a list of items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loaded: Everything worked and you&amp;rsquo;ve loaded some items. This will just
display the RecyclerView.&lt;/li&gt;
&lt;li&gt;Empty: Everything worked, but there are no items to display. This will
probably just be a &lt;code&gt;TextView&lt;/code&gt; saying something like &amp;lsquo;Nothing to see here.&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Error: There was an error somewhere along the line. You can update this with
specifics of the error, but the minimum thing you&amp;rsquo;ll need is a message
saying something like &amp;lsquo;Whoops, something went wrong&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;Loading: This is a spinning icon or a loading bar to show that work is being
done. One candidate here is some sort of progress bar set to indeterminate
progress status. In my example I&amp;rsquo;m using a
&lt;a href=&#34;https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html&#34;&gt;&lt;code&gt;SwipeRefreshLayout&lt;/code&gt;&lt;/a&gt;
to give a &amp;lsquo;pull down to refresh action&amp;rsquo;, so my loading view is just to set
this to refresh initiated. When a load completes, I call the view to
indicate that the load has completed, hiding the little spinning icon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, the idea here is to write a view that has these four modes: Loaded, Empty,
Error, and Loading. When I did this, I defined an &lt;code&gt;enum&lt;/code&gt; with those four
choices, subclassed &lt;code&gt;LinearLayout&lt;/code&gt;, and created a method called
&lt;code&gt;updateViewState(ViewState viewState)&lt;/code&gt;. This is responsible for hiding all the
irrelevant views and showing only the view that matches &lt;code&gt;viewState&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you implement that class, you should write Robolectric tests to ensure that
you are showing and hiding the views as appropriate. &lt;strong&gt;To submit the
assignment, send me links to the class holding your tests.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is some starter code (that won&amp;rsquo;t run or build), that you can use for an
idea of what I&amp;rsquo;m looking for. The full files are in the
&lt;a href=&#34;https://github.com/srsudar/GithubHotness&#34;&gt;repo&lt;/a&gt; if you get stuck. Note that
because I&amp;rsquo;m using Dagger2 for dependency injection, the way I&amp;rsquo;m creating
objects for member variables may look unfamiliar.&lt;/p&gt;

&lt;p&gt;My &lt;code&gt;RepoListView&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class RepoListView extends LinearLayout {
  public enum ViewState {
    LOADED, EMPTY, ERROR, LOADING
  }

  RecyclerView rvItems; // Your RecyclerView, which will display the items
  TextView tvEmpty;     // Contains the message for empty
  TextView tvError;     // Contains the message for an error
  TextView tvLoading;   // Contains a message for loading

  public RepoListView(Context context, AttributeSet attrs) {
    super(context, attrs);
    init(context);
  }

  public RepoListView(Context context, AttributeSet attrs, int defStyleAttr) {
    super(context, attrs, defStyleAttr);
    init(context);
  }

  private void init(Context context) {
    // You&#39;ll need to define a view in layout/ that has the appropriate
    // children views.
    LayoutInflater.from(context).inflate(R.layout.view_repo_list, this, true);

    // All the findViewById calls, setting up the items, adapter, etc
  }

  public void updateViewState(ViewState state) {
    switch (state) {
      // Show and hide the views.

    }
  }

  // More methods as you need them. Take a look in my project if you want to
  // see how I did it, but try on your own first.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your test file might then look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RunWith(RobolectricTestRunner.class)
@Config(
  constants = BuildConfig.class,
  sdk = 22
)
public class RepoListViewTest {
  RepoListView view;

  @Before
  public void before() {
    // This method is run before each test.
    LayoutInflater inflater =
        LayoutInflater.from(RuntimeEnvironment.application);
    view = inflater.inflate(R.layout.inflatable_repo_list_view);

    // Set up mocks here. Remember that you want to test ONLY RepoListView
    // functionality here, not any dependency code. You might do something
    // like:
    view.adapter = mock(MyAdapter.class);
    // etc
  }

  @Test
  public void updateViewState_correctForLoaded() {
    // Test code here. I have lines like the following.
    // To get these great assertions, I have this line in my build.gradle:
    // testCompile &#39;com.squareup.assertj:assertj-android:1.1.1&#39;
    // If that gives you build errors, look at my whole file here and see if
    // this &#39;exclude&#39; option fixes it for you:
    // https://github.com/srsudar/GithubHotness/blob/master/app/build.gradle
    ...
    assertThat(view.tvError).isGone();
    ...
  }

  @Test
  public void updateViewState_correctForLoading() {

  }

  @Test
  public void updateViewState_correctForError() {

  }

  @Test
  public void updateViewState_correctForEmpty() {

  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Week 6</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-6/</link>
      <pubDate>Thu, 10 Nov 2016 10:21:48 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-6/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;This week we talked about java compilation, classpaths, and the Android build
system. We even dived into the Android SDK, using a JAR viewer to look at the
&lt;code&gt;Throw new RuntimeException(&amp;quot;Stub!&amp;quot;)&lt;/code&gt; code in every method call of the Android
SDK. Such fun. Here is a link to the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1DZ0RjEiTwwyJrn30V640NOE8NPmIY615yQ3TCJND0Ck/edit?usp=sharing&#34;&gt;Lecture 6: Building and
Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://trickyandroid.com/the-dark-world-of-jack-and-jill/&#34;&gt;The Dark Side of Jack and
Jill&lt;/a&gt;:
Great post describing the new jack compiler from the Android team. To get
into the meat of jack, it first covers in detail the classic compilation
toolchain.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Homework 5</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-5/</link>
      <pubDate>Tue, 01 Nov 2016 16:54:07 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-5/</guid>
      <description>&lt;p&gt;Your homework this week is to pick an app that you want to build toward over
the rest of the quarter. If you can&amp;rsquo;t think of one, you can instead follow
along with me as I work to build some sort of Github client. I also posted &lt;a href=&#34;https://docs.google.com/presentation/d/1JbBoJ7OQ-DTXnoQ1DlfMFtqVEUA4J6OXE5cZsfP1gwY/edit#slide=id.g18915a6abc_0_173&#34;&gt;a
few
examples&lt;/a&gt;
at the end of the slides. Some of these are harder than others.&lt;/p&gt;

&lt;p&gt;Feel free to come by office hours or email me to set up an appointment to
discuss an idea if you think something would work but you aren&amp;rsquo;t sure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For this week I would like you to describe your app to me in a paragraph, and
provide drawings of the screens you expect to use.&lt;/strong&gt; You can get fancy and
actually diagram them with software, or you can draw on a paper and send me a
picture. If I were doing this, I would use a whiteboard, and I don&amp;rsquo;t expect you
to do more than I would do.&lt;/p&gt;

&lt;p&gt;In your paragraph, explain if your app will need to save information on disk,
if it will use a network, if you&amp;rsquo;ll need a server or a &amp;lsquo;server as a service&amp;rsquo;
(e.g. &lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt; and what object models you
expect to need. Include anything else you think might be relevant.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week 5</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-5/</link>
      <pubDate>Tue, 01 Nov 2016 14:02:23 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-5/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;Today we talked about designing an app. Here are the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1JbBoJ7OQ-DTXnoQ1DlfMFtqVEUA4J6OXE5cZsfP1gwY/edit?usp=sharing&#34;&gt;Lecture 5: Designing an
App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the questions that came up was how does Mockito do its magic. The
specific point was in an example like this one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Random mockRandom = mock(Random.class);
int nextInt = 5;
when(mockRandom.nextInt()).thenReturn(nextInt);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How does Mockito take an int and apply &lt;code&gt;thenReturn()&lt;/code&gt; successfully? In other
words, say that you break down the above example to the following. How crazy
does this look, when really this is exactly what you are doing?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Random mockRandom = mock(Random.class);
int nextInt = 5;
int originalAnswer = mockRandom.nextInt();
when(originalAnswer).thenReturn(nextInt);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I.e. you are basically saying &lt;code&gt;when(5).thenReturn(nextInt)&lt;/code&gt;, which makes no
sense at all unless you consider the lines around it. I believe the way this
works is that when you call a method on a mock, it obeys previously determined
behavior (e.g. it returns the value you told it to return), &lt;strong&gt;or&lt;/strong&gt; it flags
that stubbing has begun, and it will error if stubbing has not completed. Two
examples. The code above, with the &lt;code&gt;when(5)&lt;/code&gt; example, does succeed and behaves
as expected, as the first example. This code, however, will fail with a
&lt;code&gt;MissingMethodInvocationException&lt;/code&gt; error. Clearly Mockito is tracking your
stubbing progress, since you haven&amp;rsquo;t called any methods on the mock yet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Random mockRandom = mock(Random.class);
int nextInt = 5;
int originalAnswer = 5;
when(originalAnswer).thenReturn(nextInt);
// Crash due to MissingMethodInvocationException
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code, meanwhile, will fail since we&amp;rsquo;ve begun stubbing with an invocation
of a method on the mock class (the call to &lt;code&gt;mockRandom.nextInt()&lt;/code&gt;) and called
&lt;code&gt;when()&lt;/code&gt;, but we haven&amp;rsquo;t called &lt;code&gt;thenReturn()&lt;/code&gt; or similar. It will fail with an
&lt;code&gt;UnfinishedStubbingException&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Random mockRandom = mock(Random.class);
int nextInt = 5;
int originalAnswer = mockRandom.nextInt();
when(originalAnswer);
// Crash due to UnfinishedStubbingException
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, calling a method on a mock seems to flag that, if stubbing is initiated
with a call to &lt;code&gt;when()&lt;/code&gt;, the last called method is the one we want to save an
answer for. Once that is begun via the call to &lt;code&gt;when()&lt;/code&gt;, it must be completed
via a call to &lt;code&gt;thenReturn()&lt;/code&gt; or a similar method.&lt;/p&gt;

&lt;p&gt;If you want to dive real deep down the rabbit hole, take a look at the
&lt;a href=&#34;https://github.com/mockito/mockito/blob/release/2.x/src/main/java/org/mockito/internal/MockitoCore.java#L68&#34;&gt;implementation&lt;/a&gt;
of the &lt;code&gt;when&lt;/code&gt; method on github.&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.remind.com/android-code-that-scales/&#34;&gt;MVP on Android with Great
Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://antonioleiva.com/mvp-android/&#34;&gt;More MVP on Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/1317693/what-is-model-view-presenter&#34;&gt;MVP in
General&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Homework 4</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-4/</link>
      <pubDate>Tue, 25 Oct 2016 17:27:51 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-4/</guid>
      <description>

&lt;h1 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h1&gt;

&lt;p&gt;Implement your own &lt;code&gt;RecyclerView&lt;/code&gt; to match the images shown below. Pressing the
Floating Action Button (FAB) adds an item. Pressing the trashcan deletes the
item. Adds and deletes are animated.&lt;/p&gt;

&lt;h1 id=&#34;tl-but-will-still-r&#34;&gt;tl; but will still r&lt;/h1&gt;

&lt;p&gt;As we talked about today,
&lt;a href=&#34;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html&#34;&gt;&lt;code&gt;RecyclerView&lt;/code&gt;&lt;/a&gt;
is a class that facilitates displaying lists of items, and it does so
efficiently. To accomplish this it enforces the ViewHolder design pattern in
order to minimize the number of &lt;code&gt;findViewbyId()&lt;/code&gt; calls, as these calls traverse
the view hierarchy and can be very expensive. &lt;code&gt;RecyclerView&lt;/code&gt; also provides a
number of other benefits, including fine-grained control of child positioning,
via the
&lt;a href=&#34;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html&#34;&gt;&lt;code&gt;LayoutManager&lt;/code&gt;&lt;/a&gt;,
and painless animations thanks to
&lt;a href=&#34;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html&#34;&gt;&lt;code&gt;ItemAnimator&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Homework 4 is to implement a &lt;code&gt;RecyclerView&lt;/code&gt; that looks like the images shown
below&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I would break this into several steps. These are somewhat specific, as many
people missed last week&amp;rsquo;s lecture and I get the impression that the way all of
this plumbs together remains somewhat opaque. Much of this is described in
Android&amp;rsquo;s guide to &lt;a href=&#34;https://developer.android.com/training/material/lists-cards.html&#34;&gt;Creating Lists and
Cards&lt;/a&gt;, so
take a read through that as well.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Create a new Activity&lt;/strong&gt;: This &lt;code&gt;Activity&lt;/code&gt; will hold the &lt;code&gt;RecyclerView&lt;/code&gt;. To
get a lot of the annoying boilerplate out of the way, I would recommend
using File | New | Activity | Gallery, and then selecting &amp;lsquo;Basic Activity&amp;rsquo;.
This should include a layout and a &amp;lsquo;Floating Action Button&amp;rsquo;, which is a
common design element on Android.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Download the icons&lt;/strong&gt;: You&amp;rsquo;ll need two icons for this: a trashcan and a
white plus button to go in the FAB. Download the icons
&lt;a href=&#34;https://design.google.com/icons/&#34;&gt;here&lt;/a&gt;. They are called &lt;code&gt;delete&lt;/code&gt; and
&lt;code&gt;add&lt;/code&gt;. Download the PNGs and put the &lt;code&gt;drawable-*&lt;/code&gt; directories directly under
&lt;code&gt;res/&lt;/code&gt;. You can try to use an icon importer, but I&amp;rsquo;ve never gotten this to
work. When successful, you should be able to refer to the drawables by their
name, e.g. &lt;code&gt;@drawable/ic_add_white_24dp&lt;/code&gt; in your xml.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Include RecyclerView in a layout&lt;/strong&gt;: As part of the generation process in
step 1, Android Studio will generate some layout files for you. These files
live in &lt;code&gt;res/layout/&lt;/code&gt;, and define what your view hierarchy will look like.
Note that in your &lt;code&gt;Activity&lt;/code&gt;&amp;rsquo;s &lt;code&gt;onCreate()&lt;/code&gt; method, the wizard has called
&lt;code&gt;setContentView()&lt;/code&gt; with the name of your layout file. This is where we
connect the layout in the xml to the UI presented by your &lt;code&gt;Activity&lt;/code&gt;. Define
a &lt;code&gt;RecyclerView&lt;/code&gt; in that layout file, giving it an ID so that you can refer
to it from you &lt;code&gt;Activity&lt;/code&gt; code. The Creating Lists and Cards guide above has
examples of this.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create a dummy object to display&lt;/strong&gt;: &lt;code&gt;RecyclerView&lt;/code&gt; displays lists of
objects. In the real world, this would be an object representing something,
like a Github repo or an email. You can create whatever object you want for
this. I made one called &lt;code&gt;FooObject&lt;/code&gt;, the entirety of which looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class FooObject {
 public String name;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create these objects I also made a &lt;code&gt;FooFactory&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; public class FooFactory {
   public FooObject createFoo() {
     Random random = new Random();
     int semiRandomInt = random.nextInt(500);
     FooObject result = new FooObject();
     result.name = &amp;quot;I am semi-random Foo #&amp;quot; + semiRandomInt;
     return result;
   }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Define a View to represent FooObject&lt;/strong&gt;: Adapters create Views. In our
case, we want to do this by inflating an xml file living under
&lt;code&gt;res/layout/&lt;/code&gt;. You should make yours look like the image below. Note that
there are two lines. The second line has two items: a left-aligned piece of
text and a right-aligned image of a trashcan. I used two
&lt;a href=&#34;https://developer.android.com/guide/topics/ui/layout/linear.html&#34;&gt;&lt;code&gt;LinearLayout&lt;/code&gt;&lt;/a&gt;s,
two
&lt;a href=&#34;https://developer.android.com/reference/android/widget/TextView.html&#34;&gt;&lt;code&gt;TextView&lt;/code&gt;&lt;/a&gt;s,
and an
&lt;a href=&#34;https://developer.android.com/reference/android/widget/ImageView.html&#34;&gt;&lt;code&gt;ImageView&lt;/code&gt;&lt;/a&gt;.
I wrapped everything in a
&lt;a href=&#34;https://developer.android.com/reference/android/support/v7/widget/CardView.html&#34;&gt;&lt;code&gt;CardView&lt;/code&gt;&lt;/a&gt;
to make it look fancy.
&lt;img src=&#34;https://courses.cs.washington.edu/courses/cse390a1/16au/
/homework/hw4_fooView.png&#34; alt=&#34;Closeup of Item View&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create an Adapter&lt;/strong&gt;: Extend &lt;code&gt;RecyclerView.Adapter&lt;/code&gt; and implement it to
display your &lt;code&gt;FooObject&lt;/code&gt;s. Again, the guide linked above will be extremely
helpful here.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hook up the Activity&lt;/strong&gt;: Follow the guide above to implement your
&lt;code&gt;onCreate()&lt;/code&gt; method. You should now be able to run the app and find an empty
screen. Pressing the FAB will generate a little message.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hook up the FAB&lt;/strong&gt;: Add a &lt;code&gt;View.OnClickListener&lt;/code&gt; to the FAB to add a
&lt;code&gt;FooObject&lt;/code&gt; with every click.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hook up the delete button&lt;/strong&gt;: Add a &lt;code&gt;View.OnClickListener&lt;/code&gt; to the
&lt;code&gt;ImageView&lt;/code&gt; displaying the trash can that deletes the view from the
&lt;code&gt;Adapter&lt;/code&gt;. To do this, I had to employ the &lt;code&gt;ViewHolder#getAdapterPosition()&lt;/code&gt;
method. I also used &lt;code&gt;View#setTag()&lt;/code&gt;. This is probably the trickiest part, or
at least it was the most foreign to me. Deleting the item from the dataset
is relatively simple, but getting the listener in a scope where you can call
&lt;code&gt;getAdapterPosition()&lt;/code&gt; might not be immediately obvious.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hook up animations&lt;/strong&gt;: Make sure you are calling &lt;code&gt;notifyItemInserted()&lt;/code&gt; and
&lt;code&gt;notifyItemRemoved()&lt;/code&gt; when you add and remove items. This will animate the
actions and make them look pretty.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;images&#34;&gt;Images&lt;/h1&gt;

&lt;h2 id=&#34;closeup-of-the-item-view&#34;&gt;Closeup of the Item View&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://courses.cs.washington.edu/courses/cse390a1/16au/
/homework/hw4_fooView.png&#34; alt=&#34;Closeup of Item View&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;screenshot-of-the-main-activity&#34;&gt;Screenshot of the Main Activity&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://courses.cs.washington.edu/courses/cse390a1/16au/
/homework/hw4_screenshot.png&#34; alt=&#34;Screenshot&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week 4</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-4/</link>
      <pubDate>Wed, 19 Oct 2016 11:51:32 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/post/week-4/</guid>
      <description>

&lt;h1 id=&#34;recap-and-slides&#34;&gt;Recap and Slides&lt;/h1&gt;

&lt;p&gt;Today we talked mostly about &lt;code&gt;ListView&lt;/code&gt;, &lt;code&gt;Adapter&lt;/code&gt;s, and &lt;code&gt;RecyclerView&lt;/code&gt;. Plus a
bit on &lt;code&gt;Fragment&lt;/code&gt;s. This felt like the most boring lecture to date to me. Too
much stepping through too much code, seemed to be the consensus. Here are the
code-heavy slides.&lt;/p&gt;

&lt;p&gt;Here are the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1HWFSFgZXn0Ncr_qfrdBjYq_Ho_YehIfTldghHxpVigc/edit?usp=sharing&#34;&gt;Lecture 4: Advanced
UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;p&gt;General links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/training/material/lists-cards.html&#34;&gt;Creating Lists and
Cards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://saulmm.github.io/mastering-coordinator&#34;&gt;Mastering Coordinator
Layout&lt;/a&gt;: A good overview,
with gifs, about &lt;a href=&#34;https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html&#34;&gt;Coordinator
Layout&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In class today I talked about how I don&amp;rsquo;t like &lt;code&gt;Fragment&lt;/code&gt;s. I think they are
more trouble than they are worth, and come with a very complex lifecycle that
is the source of many bugs. Here are some links discussing similar things.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/square-corner-blog/advocating-against-android-fragments-81fd0b462c97#.3j91byiex&#34;&gt;Advocating Against Android
Fragments&lt;/a&gt;:
A really great overview on testable UI in Android, and the trouble &lt;code&gt;Fragment&lt;/code&gt;s
gave them. Highly recommended.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.briangriffey.com/blog/1&#34;&gt;No Fragments, Rich Views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xxv/android-lifecycle&#34;&gt;The Complete and Hairy Android
Lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Homework 3</title>
      <link>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-3/</link>
      <pubDate>Tue, 18 Oct 2016 16:05:07 -0700</pubDate>
      
      <guid>https://courses.cs.washington.edu/courses/cse390a1/16au/homework/homework-3/</guid>
      <description>

&lt;h1 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h1&gt;

&lt;p&gt;Check out the branch &lt;code&gt;failing-tests-1&lt;/code&gt; from the mdr-original project you built
for Homework 1. Many tests should fail. Fix both the tests in the &lt;code&gt;android&lt;/code&gt; and
&lt;code&gt;androidTests&lt;/code&gt; configurations. Some rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;DO NOT CHANGE THE TESTS&lt;/strong&gt;: You should not have to edit any test code to
get these to pass. All changes should be made in non-test Java files and in
xml files. If you think you found a reason you need to change test code, and
you REALLY REALLY REALLY think you&amp;rsquo;re right, email me and ask.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DO NOT LOOK AT THE DIFF&lt;/strong&gt;: This is a git repo. The nature of version
control allows you to fix all the tests via nothing more than git trickery.
This would be super lame, however. Android is something where you learn by
doing. If you cheat, you&amp;rsquo;re only hurting yourself. Further, these
assignments are largely optional. You could just not do it and save the
effort you think you&amp;rsquo;re saving by using the diff. If you&amp;rsquo;re taking the time
to revert the diff and find yourself feeling clever, that feeling might be
misplaced.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;backstory&#34;&gt;Backstory&lt;/h1&gt;

&lt;p&gt;An incompetent collaborator has gotten ahold of the
&lt;a href=&#34;https://github.com/srsudar/mdr-original&#34;&gt;mdr-original&lt;/a&gt; project. Thinking
themselves brilliant, they&amp;rsquo;ve made loads of edits but never run the tests. &amp;lsquo;I
am god&amp;rsquo;s gift to Android programming&amp;rsquo;, you imagine them saying as they type
&lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Being the selfless hero that you are, it falls to you to save the project from
incompetence. You clench your jaw, imagine yourself on a mountain before a flag
waving triumphantly in the wind, and with a steely gaze you get to work.&lt;/p&gt;

&lt;h1 id=&#34;the-how&#34;&gt;The &amp;lsquo;How&amp;rsquo;&lt;/h1&gt;

&lt;p&gt;The broken tests are on the branch called &lt;code&gt;failing-tests-1&lt;/code&gt;. Assuming you are
using &lt;code&gt;git&lt;/code&gt; from the command line, you would run this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git fetch
git checkout failing-tests-1
git branch # should output &#39;*failing-tests-1&#39; or similar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the code in Android Studio. You should encounter a build error complaining
about a tool not found (unless you&amp;rsquo;d installed it previously).  This was
intentional. &amp;gt;:) In the real world you&amp;rsquo;ll have to fix a lot of these types of
errors. Better to get comfortable with them when there&amp;rsquo;s someone you can ask
(me).&lt;/p&gt;

&lt;p&gt;There are two types of tests in Android Studio: &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;androidTest&lt;/code&gt;.
&lt;code&gt;test&lt;/code&gt; are unit tests that can run on the JVM. In this case we&amp;rsquo;ve configured
them to use Robolectric (more on this next week). &lt;code&gt;androidTest&lt;/code&gt; are tests that
need to run on an actual device. To run these you&amp;rsquo;ll need either a physical
device or an emulator.&lt;/p&gt;

&lt;p&gt;Right click on the &lt;code&gt;android&lt;/code&gt; tests and click &amp;lsquo;Run Tests&amp;rsquo;. &lt;strong&gt;29 tests should
fail&lt;/strong&gt;. Your job is to get them passing. Fixing one bug might fix more than one
tests, so it&amp;rsquo;s not as bad as it may seem at first.&lt;/p&gt;

&lt;p&gt;Right click on the &lt;code&gt;androidTest&lt;/code&gt; tests and click &amp;lsquo;Run Tests&amp;rsquo;. &lt;strong&gt;1 test should
fail&lt;/strong&gt;. You need an emulator or physical device for this one.&lt;/p&gt;

&lt;p&gt;Look at the logs for the errors. This will be helpful in many cases, and will
tell you were to look. Most of these tests have to do with Android UI (e.g.
&lt;code&gt;View&lt;/code&gt;s), and one or two may pertain to the lifecycle.&lt;/p&gt;

&lt;p&gt;You should &lt;strong&gt;not need to edit the tests for any of these to pass&lt;/strong&gt;. If you
think you do, email me and I will tell you if I&amp;rsquo;ve made a mistake. I&amp;rsquo;ll forward
your email to the list, giving you credit. Tears of joy will be shed, glory
will be basked in. Life will be good. (But seriously, I don&amp;rsquo;t think you&amp;rsquo;ll need
to edit any tests.)&lt;/p&gt;

&lt;p&gt;You should also &lt;strong&gt;not look at the diff&lt;/strong&gt;. I could have done this in a way that
didn&amp;rsquo;t give you access to the git history. I didn&amp;rsquo;t think it was worth the
effort. If you&amp;rsquo;re cheating, you&amp;rsquo;re only hurting yourself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;See the tl;dr section for more on the rules.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don&amp;rsquo;t forget that UIs are generally specified two places:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An xml file, e.g. &lt;code&gt;res/layout/activity_main.xml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A Java Activity, e.g. &lt;code&gt;org/mamasdelrio/android/MainActivity.java&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You&amp;rsquo;ll have to edit more than these files, but those are good places to start.&lt;/p&gt;

&lt;p&gt;If you get stuck, &lt;a href=&#34;https://catalyst.uw.edu/gopost/conversation/sudars/974700&#34;&gt;ask questions on this thread on the message
board&lt;/a&gt;. If that
doesn&amp;rsquo;t work or you don&amp;rsquo;t feel comfortable posting there, I&amp;rsquo;m also happy to
field emails.&lt;/p&gt;

&lt;h1 id=&#34;the-why&#34;&gt;The &amp;lsquo;Why&amp;rsquo;&lt;/h1&gt;

&lt;p&gt;These tests try to give you more exposure to UI, &lt;code&gt;View&lt;/code&gt;s, and &lt;code&gt;Activity&lt;/code&gt;s. Next
week you&amp;rsquo;ll have to create UIs (with tests!) from scratch yourself. Use this to
get accustomed to how everything works together.&lt;/p&gt;

&lt;h1 id=&#34;submitting&#34;&gt;Submitting&lt;/h1&gt;

&lt;p&gt;Fork the repo on github and submit your changes to a &lt;code&gt;failing-tests-1&lt;/code&gt; branch
there. &lt;a href=&#34;https://help.github.com/articles/fork-a-repo/&#34;&gt;Here is a guide on github
forking&lt;/a&gt;. Email me the link with
&amp;lsquo;HW 3: Submission&amp;rsquo; in the subject.&lt;/p&gt;

&lt;p&gt;I recognize this is a bit of a git-heavy and github-heavy class if you&amp;rsquo;re not
familiar with these tools. If you find this overwhelming, email me and I will
try to help you understand them. These are things that you&amp;rsquo;ll be better off
knowing, and I am consciously trying to encourage that you become comfortable
with them. If you &lt;strong&gt;really&lt;/strong&gt; don&amp;rsquo;t want to use github, you can email me a patch
file with the same subject as above.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>